class Solution {
public:


    int findPivot(vector<int>& arr, int n) {

        int s = 0;
        int e = n - 1;
        int mid = s + ((e-s)/2);

        while(s < e) {
            if(arr[mid] > arr[0]) {
                s = mid + 1;
            }
            else {
                e = mid;
            }
            mid = s + ((e - s)/2);
        }
        return s;
    }


    int binarySearch(vector<int>& arr, int s, int e, int target) {
        int mid = s + ((e - s)/2);

        while(s <= e) {
            
            if(arr[mid] == target) {
                return mid;
            }
            else if(arr[mid] > target) {
                e = mid - 1;
            }
            else if(arr[mid] < target) {
                s = mid + 1;
            }
            mid = s + ((e - s)/2);
            
        }

        return -1;
    }


    int search(vector<int>& arr, int target) {
       
        int n = arr.size();

        int pivot = findPivot(arr,n);

        int s = 0;
        int e = n - 1;

        // Target lies on second line
        if(arr[pivot] <= target && target <= arr[n-1]) {
            s = pivot;
        }

        //Target lies on first line
        else {
            e = pivot - 1;
        }
        
        int ans = binarySearch(arr,s,e,target);

        return ans;
    }
};
